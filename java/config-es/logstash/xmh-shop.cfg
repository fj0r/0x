input {
  jdbc {
    jdbc_driver_library => "./mysql-connector-java-5.1.49-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://${MYSQL_URL}"
    jdbc_user => "${MYSQL_USER}"
    jdbc_password => "${MYSQL_PASSWORD}"
    schedule => "* * * * *"
    statement => "
select g.goods_id as id
     , g.goods_alias
     , g.goods_id
     , g.parent_id
     , g.goods_name
     , g.goods_sn
     , e.click_count
     , g.add_time
     , g.update_time
     , g.sales_amount
     , b.brand_id
     , b.brand_name
     , b.brand_logo
     , b.made_in_china as brand_made_in_china
     , coalesce(nullif(g.goods_origin, ''), nullif(parent.goods_origin, '')) as cover
     , g.goods_status
     , g.is_main_sell
     , g.cat_id
     , c.cat_name
     , p.selling_price
     , g.is_main_show
     , g.goods_thumb
     , g.goods_img
     , g.goods_origin
     , g.is_show_price
     , g.goods_packing
     , g.goods_unit
     , g.goods_supplier_sn
     , g.supplier_num
     , e.sort_order
     , attr.kv as attrs
     , coalesce(group_concat(ga.img_url  separator ';'), parent.img_url)  gallery_img_url
     , coalesce(group_concat(ga.thumb_url  separator ';'), parent.thumb_url) gallery_thumb_url
     , coalesce(group_concat(ga.origin_url  separator ';'),  parent.origin_url) gallery_origin_url
     , if(g.is_main_show = 1 and g.is_main_sell = 0, child.selling_price, p.selling_price) as comp_price
from shop_goods as g
     left outer join (
        select g1.goods_id
             , g1.goods_origin
             , group_concat(ga1.img_url separator ';') as img_url
             , group_concat(ga1.thumb_url separator ';') as thumb_url
             , group_concat(ga1.origin_url separator ';') as origin_url
        from shop_goods as g1
        left outer join shop_goods_gallery as ga1 on g1.goods_id = ga1.goods_id
        group by ga1.goods_id
     ) as parent on g.parent_id= parent.goods_id
     left join (
        select g2.parent_id
             , price.goods_id
             , min(selling_price) as selling_price
        from shop_goods as g2
        left join shop_goods_price as price ON g2.goods_id = price.goods_id
        where factory_id = 1000 and g2.goods_status in (1, 2, 8)
        group by g2.parent_id
     ) as child on g.goods_id = child.parent_id
     left outer join (
        select goods_id
             , group_concat(concat(attr_name, ':::', attr_value, ':::', a.attr_id) separator ';;;') as kv
        from shop_goods_attr as ga
        left outer join shop_attribute as a on ga.attr_id = a.attr_id and a.attr_input_type <> 0 and a.is_show_search_view = 1
        group by goods_id
     ) as attr on g.goods_id = attr.goods_id
     left outer join shop_goods_extend as e on e.goods_id=g.goods_id
     left outer join shop_goods_price as p on p.goods_id=g.goods_id and p.factory_id=1000
     left outer join shop_brand as b on b.brand_id=g.brand_id
     left outer join shop_category as c on c.cat_id=g.cat_id
     left outer join shop_goods_factory as f on g.goods_id=f.goods_id
     left outer join shop_goods_gallery AS ga ON ga.goods_id = g.goods_id
where f.factory_id=1000
  and g.update_time >= :sql_last_value
GROUP BY g.goods_id
"
    use_column_value => true
    tracking_column_type => "timestamp"
    tracking_column => "update_time"
    last_run_metadata_path => "syncpoint_table-shop"
  }
}

filter {
  # kv {
  #   source => "attrs"
  #   target => "attrs"
  #   allow_duplicate_values => true
  #   field_split_pattern => ";;;"
  #   value_split_pattern => ":::"
  # }
  ruby {
    code => "
      attrs = event.get('attrs').split(';;;')
      new_attrs = attrs.map do |attr|
          k, v, id = attr.split(':::')
          { key: k, val: v, id: id }
      end
      event.set('attrs', new_attrs)
    "
    # remove_field => ['attrs']
  }
  mutate {
    split => { "gallery_img_url" => ";" }
    split => { "gallery_thumb_url" => ";" }
    split => { "gallery_origin_url" => ";" }
    add_field => { "brands" => "%{brand_name}|%{brand_id}"}
    add_field => { "cats" => "%{cat_name}|%{cat_id}"}
    # add_field => { "[cat1][name]" => "%{cat_name}"}
    # add_field => { "[cat1][id]" => "%{cat_id}"}
  }
}

output {
  elasticsearch {
		hosts => ["http://es:9200/"]
    index => "goods"
    document_id => "%{id}"
    template => "/usr/share/logstash/config/goods-template.json"
    template_name => "goods_template"
    template_overwrite => true
  }
}
