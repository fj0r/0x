#load_module modules/ngx_nchan_module.so;

#daemon off;
#worker_processes  auto;
user root;
worker_processes  1;

events {
    worker_connections  1024;
}

env TIMEZONE;
env HOSTNAME;

http {
    include       mime.types;
    sendfile        on;

    keepalive_timeout  0;

    gzip  on;

    log_format apm 'time=$time_iso8601 client=$remote_addr '
               'method=$request_method uri=$request_uri proto=$server_protocol '
               'req_len=$request_length '
               'req_time=$request_time '
               'stat=$status sent=$bytes_sent '
               'body_sent=$body_bytes_sent '
               'referer=$http_referer '
               'ua="$http_user_agent" '
               'us_addr=$upstream_addr '
               'us_status=$upstream_status '
               'ust_res=$upstream_response_time '
               'ust_conn=$upstream_connect_time '
               'ust_header=$upstream_header_time';

    ## Set a variable to help us decide if we need to add the
    ## 'Docker-Distribution-Api-Version' header.
    ## The registry always sets this header.
    ## In the case of nginx performing auth, the header is unset
    ## since nginx is auth-ing before proxying.
    map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
        '' 'registry/2.0';
    }

    server {
        set $root             '/srv';
        listen                5000;
        root                  $root;
        charset               utf-8;
        default_type          application/octet-stream;
        #default_type          application/json;

        proxy_http_version    1.1;
        proxy_set_header      Host              $host;
        proxy_set_header      X-Real-IP         $remote_addr;
        proxy_set_header      X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header      X-Forwarded-Proto $scheme;
        proxy_set_header      X-Original-URI    $request_uri;
        proxy_set_header      Connection        "upgrade";
        proxy_set_header      Upgrade           $http_upgrade;
        proxy_connect_timeout 1800s;
        proxy_read_timeout    1800s;
        proxy_send_timeout    1800s;
        client_max_body_size  0;
        chunked_transfer_encoding on;

        #resolver 1.1.1.1;
        #access_log  /var/log/openresty/access.log   apm;

        set $htaccess_user_file /auth/htpasswd;
        set $auth off;
        if (-f $htaccess_user_file) {
            set $auth "Registry realm";
        }

        location ~ /v2/.* {
            auth_basic $auth;
            auth_basic_user_file $htaccess_user_file;
            # Do not allow connections from docker 1.5 and earlier
            # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
            if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
              return 404;
            }

            # To add basic authentication to v2 use auth_basic setting.
            #auth_basic "Registry realm";
            #auth_basic_user_file /etc/nginx/conf.d/nginx.htpasswd;

            ## If $docker_distribution_api_version is empty, the header is not added.
            ## See the map directive above where this variable is defined.
            add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

            proxy_pass                          http://localhost:5001;
            proxy_set_header  Host              $http_host;   # required for docker client's sake
            proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
            proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header  X-Forwarded-Proto $scheme;
            proxy_read_timeout                  900;
        }

        location / {
            autoindex on;
            autoindex_format json;
        }

        location = /setup.sh {
            try_files $uri =404;
            header_filter_by_lua_block {
                ngx.header.content_length = nil
            }
            body_filter_by_lua_block {
                host = ngx.var.scheme.."://".. ngx.var.http_host
                ngx.arg[1] = ngx.arg[1]:gsub('${HTTP_HOST}', host)
                --ngx.arg[1] = ngx.re.sub(ngx.arg[1], '\\${HOST}', host)
            }
        }

        set_by_lua_block $real_remote {
            if ngx.var.http_x_forwarded_for then
                for r in ngx.var.http_x_forwarded_for:gmatch('([^,]+)') do
                    return r
                end
            end
            return ngx.var.remote_addr
        }

        location = /about {
            auth_basic $auth;
            auth_basic_user_file $htaccess_user_file;
            default_type application/json;
            content_by_lua_block {
                local json = require('cjson')
                local data = {}
                local file = io.open('/about.json', 'r')
                if file ~= nil then
                    local txt = file:read('*all')
                    data = json.decode(txt)
                    io.close(file)
                end

                data.host = ngx.var.http_host
                data.useraddr = ngx.var.real_remote
                data.timezone = os.getenv("TIMEZONE")
                data.hostname = os.getenv("HOSTNAME")
                data.useragent = ngx.req.get_headers()['user-agent']

                ngx.say(json.encode(data))
                ngx.exit(200)
            }
        }

        include ./bin.conf;
        include ./admin.conf;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }

        error_page      500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

    }

}

