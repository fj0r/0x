# modules
{%- if NCHAN %}
load_module modules/ngx_nchan_module.so;
{%- endif %}

daemon off;
user www-data;
{%- if WORKER_PROCESSES %}
worker_processes {{ WORKER_PROCESSES }};
{%- else %}
worker_processes auto;
{%- endif %}

events {
    worker_connections  {{ WORKER_CONNECTIONS }};
}

# about
{%- if ABOUT %}
env TIMEZONE;
env HOSTNAME;
{%- endif %}
{%- if ABOUT_ENV -%}
{%- for i in ABOUT_ENV %}
env {{i}};
{%- endfor %}
{%- endif %}

# upload
{%- if UPLOAD_ROOT %}
# ref by `lua/upload.lua`
env UPLOAD_ROOT;
{%- endif %}

http {
    include            mime.types;
    sendfile           on;
    keepalive_timeout  0;
    gzip               on;
    # log apm
    {%- if LOG_FORMAT == "apm" %}
    log_format apm     'time=$time_iso8601 client=$remote_addr '
                       'method=$request_method uri=$request_uri proto=$server_protocol '
                       'req_len=$request_length '
                       'req_time=$request_time '
                       'stat=$status sent=$bytes_sent '
                       'body_sent=$body_bytes_sent '
                       'referer=$http_referer '
                       'ua="$http_user_agent" '
                       'us_addr=$upstream_addr '
                       'us_status=$upstream_status '
                       'ust_res=$upstream_response_time '
                       'ust_conn=$upstream_connect_time '
                       'ust_header=$upstream_header_time';
    {%- endif %}

    {%- if NCHAN %}
    variables_hash_max_size 4096;
    variables_hash_bucket_size 256;
    {%- endif %}

    # map vars
    {%- if MAP_VARS %}
    {%- for m in MAP_VARS %}
    map ${{ m.src }} ${{ m.dest }} {
        {%- for k, v in m.value %}
        '{{ k }}' '{{ v }}';
        {%- endfor %}
    }
    {%- endfor %}
    {%- endif %}

    # short url
    {%- if SHORT_URL_JSONFILE %}
    lua_shared_dict short_url 10m;
    init_by_lua_block {
        local cjson = require('cjson')
        -- /srv/short-url.json
        local f = io.open('{{ SHORT_URL_JSONFILE }}', 'r')
        local data = f:read("*a")
        f:close()
        local url = ngx.shared.short_url
        for k, v in pairs(cjson.decode(data)) do
           url:set(k, v)
        end
    }
    {%- endif %}

        {%- set root = WEB_ROOT %}
        {%- set port = LISTEN_PORT %}
        {%- if RESOLVER %}
            {%- set resolver = RESOLVER %}
        {%- else %}
            {%- set resolver = '' %}
        {%- endif %}
        {%- if FASTCGI %}
            {%- set fastcgi = FASTCGI %}
        {%- else %}
            {%- set fastcgi = '' %}
        {%- endif %}
        {%- if FASTCGI_PATHINFO %}
            {%- set fastcgi_pathinfo = FASTCGI_PATHINFO %}
        {%- else %}
            {%- set fastcgi_pathinfo = '' %}
        {%- endif %}
        {%- if REAL_REMOTE %}
            {%- set real_remote = REAL_REMOTE %}
        {%- else %}
            {%- set real_remote = '' %}
        {%- endif %}
        {%- if LOCATION %}
            {%- set location = LOCATION %}
        {%- else %}
            {%- set location = '' %}
        {%- endif %}
    server {
        {%- include "site.conf.tmpl" %}

        # about
        {%- if ABOUT %}
        location = /about {
            default_type application/json;
            content_by_lua_block {
                local json = require('cjson')
                local data = {}
                local file = io.open('/about.json', 'r')
                if file ~= nil then
                    local txt = file:read('*all')
                    data = json.decode(txt)
                    io.close(file)
                end

                data.host = ngx.var.http_host
                data.useraddr = ngx.var.real_remote
                data.timezone = os.getenv("TIMEZONE")
                data.hostname = os.getenv("HOSTNAME")
                data.useragent = ngx.req.get_headers()['user-agent']
                {%- if ABOUT_ENV %}
                data.env = {}
                {%- for i in ABOUT_ENV %}
                data.env.{{i}} = os.getenv("{{i}}")
                {%- endfor %}
                {%- endif %}

                ngx.say(json.encode(data))
                ngx.exit(200)
            }
        }
        {%- endif %}

        # nchan
        {%- if NCHAN %}

        ## subscribe
        location ~ /sub/(.*)$ {
            nchan_subscriber;
            nchan_channel_id "$1";
            nchan_channel_id_split_delimiter ",";
            nchan_subscriber_first_message 0;
            nchan_authorize_request /auth;
            nchan_subscribe_request /upstream_sub;
            nchan_unsubscribe_request /upstream_unsub;
            {%- if NCHAN_REDIS %}
            nchan_use_redis on;
            nchan_redis_pass {{NCHAN_REDIS}};
            {%- endif %}
        }

        ## publish
        location ~ /pub/(.*)$ {
            nchan_publisher;
            nchan_channel_id "$1";
            {%- if NCHAN_REDIS %}
            nchan_redis_pass {{NCHAN_REDIS}};
            {%- endif %}
            nchan_authorize_request /auth;
            nchan_publisher_upstream_request /upstream_pub;
            nchan_message_timeout 5m;
            # deny all;
        }

        ## Message forwarding
        location = /upstream_pub {
            proxy_pass http://127.0.0.1/nchan/pub;
            proxy_pass_request_body on;
            proxy_set_header X-Publisher-Type $nchan_publisher_type ;
            proxy_set_header X-Prev-Message-Id $nchan_prev_message_id ;
            proxy_set_header X-Channel-Id $nchan_channel_id ;
            proxy_set_header X-Original-URI $request_uri ;
            proxy_set_header X-Access-Token $http_access_token ;
            # deny all;
        }

        ## cancel subscribe Message forwarding
        location = /upstream_unsub {
            proxy_pass http://127.0.0.1/nchan/unsub;
            proxy_ignore_client_abort on; #!!!important!!!!
            proxy_set_header X-Subscriber-Type $nchan_subscriber_type;
            proxy_set_header X-Channel-Id $nchan_channel_id;
            proxy_set_header X-Original-URI $request_uri;
            # deny all;
        }

        ## subscribe Message forwarding
        location = /upstream_sub {
            proxy_pass http://127.0.0.1/nchan/sub;
            proxy_set_header X-Subscriber-Type $nchan_subscriber_type;
            proxy_set_header X-Message-Id $nchan_message_id;
            proxy_set_header X-Channel-Id $nchan_channel_id;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Access-Token $http_access_token ;
            # deny all;
        }

        ## nchan authentication
        location = /auth {
            proxy_pass http://127.0.0.1/nchan/auth;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Subscriber-Type $nchan_subscriber_type;
            proxy_set_header X-Publisher-Type $nchan_publisher_type;
            proxy_set_header X-Prev-Message-Id $nchan_prev_message_id;
            proxy_set_header X-Channel-Id $nchan_channel_id;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Forwarded-For $remote_addr;
            # deny all;
        }

        ## nchan status
        location = /private/status {
            nchan_stub_status;
            deny all;
        }
        {%- endif %}


        # replace HTTP_HOST
        {%- if REPLACE_HOST %}
        {%- for i in REPLACE_HOST %}
        location = {{ i }} {
            try_files $uri =404;
            header_filter_by_lua_block {
                ngx.header.content_length = nil
            }
            body_filter_by_lua_block {
                host = ngx.var.scheme.."://".. ngx.var.http_host
                ngx.arg[1] = ngx.arg[1]:gsub('${HTTP_HOST}', host)
                --ngx.arg[1] = ngx.re.sub(ngx.arg[1], '\\${HOST}', host)
            }
        }
        {%- endfor %}
        {%- endif %}

        # upload
        {%- if UPLOAD_ROOT %}
        location ~ /{{UPLOAD_ROOT}}/(.*) {
            {%- if HTPASSWORD %}
            auth_basic "Please enter your username and password";
            auth_basic_user_file {{ HTACCESS_USER_FILE }};
            {%- endif %}
            set $path $1;
            content_by_lua_file conf/lua/upload.lua;
        }
        {%- endif %}

        # path to ip
        {%- if PATH_TO_IP %}
        location ~ /([0-9]+)/(.*) {
            proxy_pass http://127.0.0.1:$1/$2;
        }
        {%- endif %}

        # ext
        include ./ext/*.conf;

        # http_bin
        {%- if HTTP_BIN %}
        location = /{{ HTTP_BIN }}/ip {
            default_type 'text';
            content_by_lua_block {
                ngx.print(ngx.var.real_remote)
                ngx.exit(200)
            }
        }

        location = /{{ HTTP_BIN }}/ua {
            default_type 'text';
            content_by_lua_block {
                ngx.print(ngx.req.get_headers()['user-agent'])
                ngx.exit(200)
            }
        }

        location = /{{ HTTP_BIN }}/redirect {
            default_type 'text';
            content_by_lua_block {
                -- ngx.header.content_type = 'text'
                ngx.redirect(ngx.req.get_uri_args()['url'], 302)
            }
        }

        location = /{{ HTTP_BIN }}/headers {
            default_type 'text';
            content_by_lua_block {
                ngx.say(ngx.req.raw_header())
                ngx.exit(200)
            }
        }

        location = /{{ HTTP_BIN }}/body {
            lua_need_request_body on;
            content_by_lua_block {
                ngx.print(ngx.req.get_body_data())
                ngx.exit(200)
            }
        }

        location ~ /{{ HTTP_BIN }}/exec/(.*) {
            {%- if HTPASSWORD %}
            auth_basic "Please enter your username and password";
            auth_basic_user_file {{ HTACCESS_USER_FILE }};
            {%- endif %}
            default_type 'text';
            content_by_lua_block {
                local shell = require "resty.shell"
                local key = ngx.var[1]
                local arg = ngx.req.get_uri_args()
                local cmd = {
                    du = [[du -hd 1 /srv]],
                    pwd = [[pwd]],
                    ls  = [[ls]],
                }
                local ok, stdout, stderr, reason, status = shell.run(cmd[key], nil, 3000, 409600)
                ngx.say(stdout)
                ngx.say(stderr)
                ngx.exit(200)
            }
        }
        {%- endif %}

        # short url
        {%- if SHORT_URL_JSONFILE %}
        location ~ ^/{{ SHORT_URL_PREFIX }}(.+) {
             content_by_lua_block {
                 ngx.redirect(ngx.shared.short_url:get(ngx.var[1]))
             }
        }
        {%- endif %}
    }
    # SITE
    {%- if SITE %}
    {%- for s in SITE %}
        {%- set root = s.root %}
        {%- set port = s.port %}
        {%- if s.resolver %}
            {%- set resolver = s.resolver %}
        {%- else %}
            {%- set resolver = '' %}
        {%- endif %}
        {%- if s.fastcgi %}
            {%- set fastcgi = s.fastcgi %}
        {%- else %}
            {%- set fastcgi = '' %}
        {%- endif %}
        {%- if s.real_remote %}
            {%- set real_remote = s.real_remote %}
        {%- else %}
            {%- set real_remote = '' %}
        {%- endif %}
        {%- if s.location %}
            {%- set location = s.location %}
        {%- else %}
            {%- set location = '' %}
        {%- endif %}
    server {
        {%- include "site.conf.tmpl" %}
    }
    {%- endfor %}
    {%- endif %}
}
