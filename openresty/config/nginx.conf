#load_module modules/ngx_nchan_module.so;

daemon off;
user www-data;
#worker_processes  auto;
worker_processes  1;

events {
    worker_connections  1024;
}

env TIMEZONE;
env HOSTNAME;

http {
    include       mime.types;
    sendfile        on;

    keepalive_timeout  0;

    gzip  on;

    log_format apm 'time=$time_iso8601 client=$remote_addr '
               'method=$request_method uri=$request_uri proto=$server_protocol '
               'req_len=$request_length '
               'req_time=$request_time '
               'stat=$status sent=$bytes_sent '
               'body_sent=$body_bytes_sent '
               'referer=$http_referer '
               'ua="$http_user_agent" '
               'us_addr=$upstream_addr '
               'us_status=$upstream_status '
               'ust_res=$upstream_response_time '
               'ust_conn=$upstream_connect_time '
               'ust_header=$upstream_header_time';

    server {
        set $root             '/srv';
        listen                80;
        root                  $root;
        charset               utf-8;
       #default_type          application/octet-stream;
        default_type          application/json;

        proxy_http_version    1.1;
        proxy_set_header      Host              $host;
        proxy_set_header      X-Real-IP         $remote_addr;
        proxy_set_header      X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header      X-Forwarded-Proto $scheme;
        proxy_set_header      X-Original-URI    $request_uri;
        proxy_set_header      Connection        "upgrade";
        proxy_set_header      Upgrade           $http_upgrade;
        proxy_connect_timeout 1800s;
        proxy_read_timeout    1800s;
        proxy_send_timeout    1800s;
        client_max_body_size  10m;

        #resolver 1.1.1.1;
        #access_log  /var/log/openresty/access.log   apm;

        set $htaccess_user_file /etc/openresty/htpasswd;
        set $auth_enable off;

        location / {
            autoindex on;
            autoindex_format json;
        }

        set_by_lua_block $real_remote {
            if ngx.var.http_x_forwarded_for then
                for r in ngx.var.http_x_forwarded_for:gmatch('([^,]+)') do
                    return r
                end
            end
            return ngx.var.remote_addr
        }

        location = /about {
            default_type application/json;
            content_by_lua_block {
                local json = require('cjson')
                local data = {}
                local file = io.open('/about.json', 'r')
                if file ~= nil then
                    local txt = file:read('*all')
                    data = json.decode(txt)
                    io.close(file)
                end

                data.host = ngx.var.http_host
                data.useraddr = ngx.var.real_remote
                data.timezone = os.getenv("TIMEZONE")
                data.hostname = os.getenv("HOSTNAME")
                data.useragent = ngx.req.get_headers()['user-agent']

                ngx.say(json.encode(data))
                ngx.exit(200)
            }
        }

        include ./bin.conf;

        include ./location/*.conf;

        #location ~ /up/(.*) {
        #    if (-f $htaccess_user_file) {
        #        set $auth_enable "Please enter your username and password";
        #    }
        #    auth_basic $auth_enable;
        #    auth_basic_user_file $htaccess_user_file;
        #    set $path $1;
        #    content_by_lua_file conf/lua/upload.lua;
        #}

        location ~ /([0-9]+)/(.*) {
            proxy_pass http://127.0.0.1:$1/$2;
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }

        error_page      500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # location /path/to/ {
        #     rewrite ^/path/to/(.*)$ /$1 break;
        #     proxy_set_header Host route.s;
        #     proxy_pass http://route.s;
        # }

    }

}

